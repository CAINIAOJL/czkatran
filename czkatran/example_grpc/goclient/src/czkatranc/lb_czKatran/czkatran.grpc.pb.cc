// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: czkatran.proto

#include "czkatran.pb.h"
#include "czkatran.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace lb {
namespace czkatran {

static const char* czKatranService_method_names[] = {
  "/lb.czkatran.czKatranService/changeMac",
  "/lb.czkatran.czKatranService/getMac",
  "/lb.czkatran.czKatranService/addVip",
  "/lb.czkatran.czKatranService/delVip",
  "/lb.czkatran.czKatranService/getAllVips",
  "/lb.czkatran.czKatranService/modifyVip",
  "/lb.czkatran.czKatranService/modifyReal",
  "/lb.czkatran.czKatranService/getVipFlags",
  "/lb.czkatran.czKatranService/getRealFlags",
  "/lb.czkatran.czKatranService/addRealForVip",
  "/lb.czkatran.czKatranService/delRealForVip",
  "/lb.czkatran.czKatranService/modifyRealsForVip",
  "/lb.czkatran.czKatranService/getRealsForVip",
  "/lb.czkatran.czKatranService/modifyQuicRealsMapping",
  "/lb.czkatran.czKatranService/getQuicRealsMapping",
  "/lb.czkatran.czKatranService/getStatsForVip",
  "/lb.czkatran.czKatranService/getLruStats",
  "/lb.czkatran.czKatranService/getLruMissStats",
  "/lb.czkatran.czKatranService/getLruFailbackStats",
  "/lb.czkatran.czKatranService/getIcmpTooBigStats",
  "/lb.czkatran.czKatranService/addHealthcheckerDst",
  "/lb.czkatran.czKatranService/delHealthcheckerDst",
  "/lb.czkatran.czKatranService/getHealthcheckersDst",
};

std::unique_ptr< czKatranService::Stub> czKatranService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< czKatranService::Stub> stub(new czKatranService::Stub(channel, options));
  return stub;
}

czKatranService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_changeMac_(czKatranService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getMac_(czKatranService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_addVip_(czKatranService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_delVip_(czKatranService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getAllVips_(czKatranService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_modifyVip_(czKatranService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_modifyReal_(czKatranService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getVipFlags_(czKatranService_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getRealFlags_(czKatranService_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_addRealForVip_(czKatranService_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_delRealForVip_(czKatranService_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_modifyRealsForVip_(czKatranService_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getRealsForVip_(czKatranService_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_modifyQuicRealsMapping_(czKatranService_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getQuicRealsMapping_(czKatranService_method_names[14], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getStatsForVip_(czKatranService_method_names[15], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getLruStats_(czKatranService_method_names[16], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getLruMissStats_(czKatranService_method_names[17], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getLruFailbackStats_(czKatranService_method_names[18], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getIcmpTooBigStats_(czKatranService_method_names[19], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_addHealthcheckerDst_(czKatranService_method_names[20], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_delHealthcheckerDst_(czKatranService_method_names[21], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getHealthcheckersDst_(czKatranService_method_names[22], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status czKatranService::Stub::changeMac(::grpc::ClientContext* context, const ::lb::czkatran::Mac& request, ::lb::czkatran::Bool* response) {
  return ::grpc::internal::BlockingUnaryCall< ::lb::czkatran::Mac, ::lb::czkatran::Bool, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_changeMac_, context, request, response);
}

void czKatranService::Stub::async::changeMac(::grpc::ClientContext* context, const ::lb::czkatran::Mac* request, ::lb::czkatran::Bool* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::lb::czkatran::Mac, ::lb::czkatran::Bool, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_changeMac_, context, request, response, std::move(f));
}

void czKatranService::Stub::async::changeMac(::grpc::ClientContext* context, const ::lb::czkatran::Mac* request, ::lb::czkatran::Bool* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_changeMac_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::lb::czkatran::Bool>* czKatranService::Stub::PrepareAsyncchangeMacRaw(::grpc::ClientContext* context, const ::lb::czkatran::Mac& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::lb::czkatran::Bool, ::lb::czkatran::Mac, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_changeMac_, context, request);
}

::grpc::ClientAsyncResponseReader< ::lb::czkatran::Bool>* czKatranService::Stub::AsyncchangeMacRaw(::grpc::ClientContext* context, const ::lb::czkatran::Mac& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncchangeMacRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status czKatranService::Stub::getMac(::grpc::ClientContext* context, const ::lb::czkatran::Empty& request, ::lb::czkatran::Mac* response) {
  return ::grpc::internal::BlockingUnaryCall< ::lb::czkatran::Empty, ::lb::czkatran::Mac, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getMac_, context, request, response);
}

void czKatranService::Stub::async::getMac(::grpc::ClientContext* context, const ::lb::czkatran::Empty* request, ::lb::czkatran::Mac* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::lb::czkatran::Empty, ::lb::czkatran::Mac, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getMac_, context, request, response, std::move(f));
}

void czKatranService::Stub::async::getMac(::grpc::ClientContext* context, const ::lb::czkatran::Empty* request, ::lb::czkatran::Mac* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getMac_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::lb::czkatran::Mac>* czKatranService::Stub::PrepareAsyncgetMacRaw(::grpc::ClientContext* context, const ::lb::czkatran::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::lb::czkatran::Mac, ::lb::czkatran::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getMac_, context, request);
}

::grpc::ClientAsyncResponseReader< ::lb::czkatran::Mac>* czKatranService::Stub::AsyncgetMacRaw(::grpc::ClientContext* context, const ::lb::czkatran::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetMacRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status czKatranService::Stub::addVip(::grpc::ClientContext* context, const ::lb::czkatran::VipMeta& request, ::lb::czkatran::Bool* response) {
  return ::grpc::internal::BlockingUnaryCall< ::lb::czkatran::VipMeta, ::lb::czkatran::Bool, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_addVip_, context, request, response);
}

void czKatranService::Stub::async::addVip(::grpc::ClientContext* context, const ::lb::czkatran::VipMeta* request, ::lb::czkatran::Bool* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::lb::czkatran::VipMeta, ::lb::czkatran::Bool, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_addVip_, context, request, response, std::move(f));
}

void czKatranService::Stub::async::addVip(::grpc::ClientContext* context, const ::lb::czkatran::VipMeta* request, ::lb::czkatran::Bool* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_addVip_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::lb::czkatran::Bool>* czKatranService::Stub::PrepareAsyncaddVipRaw(::grpc::ClientContext* context, const ::lb::czkatran::VipMeta& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::lb::czkatran::Bool, ::lb::czkatran::VipMeta, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_addVip_, context, request);
}

::grpc::ClientAsyncResponseReader< ::lb::czkatran::Bool>* czKatranService::Stub::AsyncaddVipRaw(::grpc::ClientContext* context, const ::lb::czkatran::VipMeta& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncaddVipRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status czKatranService::Stub::delVip(::grpc::ClientContext* context, const ::lb::czkatran::Vip& request, ::lb::czkatran::Bool* response) {
  return ::grpc::internal::BlockingUnaryCall< ::lb::czkatran::Vip, ::lb::czkatran::Bool, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_delVip_, context, request, response);
}

void czKatranService::Stub::async::delVip(::grpc::ClientContext* context, const ::lb::czkatran::Vip* request, ::lb::czkatran::Bool* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::lb::czkatran::Vip, ::lb::czkatran::Bool, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_delVip_, context, request, response, std::move(f));
}

void czKatranService::Stub::async::delVip(::grpc::ClientContext* context, const ::lb::czkatran::Vip* request, ::lb::czkatran::Bool* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_delVip_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::lb::czkatran::Bool>* czKatranService::Stub::PrepareAsyncdelVipRaw(::grpc::ClientContext* context, const ::lb::czkatran::Vip& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::lb::czkatran::Bool, ::lb::czkatran::Vip, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_delVip_, context, request);
}

::grpc::ClientAsyncResponseReader< ::lb::czkatran::Bool>* czKatranService::Stub::AsyncdelVipRaw(::grpc::ClientContext* context, const ::lb::czkatran::Vip& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncdelVipRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status czKatranService::Stub::getAllVips(::grpc::ClientContext* context, const ::lb::czkatran::Empty& request, ::lb::czkatran::Vips* response) {
  return ::grpc::internal::BlockingUnaryCall< ::lb::czkatran::Empty, ::lb::czkatran::Vips, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getAllVips_, context, request, response);
}

void czKatranService::Stub::async::getAllVips(::grpc::ClientContext* context, const ::lb::czkatran::Empty* request, ::lb::czkatran::Vips* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::lb::czkatran::Empty, ::lb::czkatran::Vips, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getAllVips_, context, request, response, std::move(f));
}

void czKatranService::Stub::async::getAllVips(::grpc::ClientContext* context, const ::lb::czkatran::Empty* request, ::lb::czkatran::Vips* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getAllVips_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::lb::czkatran::Vips>* czKatranService::Stub::PrepareAsyncgetAllVipsRaw(::grpc::ClientContext* context, const ::lb::czkatran::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::lb::czkatran::Vips, ::lb::czkatran::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getAllVips_, context, request);
}

::grpc::ClientAsyncResponseReader< ::lb::czkatran::Vips>* czKatranService::Stub::AsyncgetAllVipsRaw(::grpc::ClientContext* context, const ::lb::czkatran::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetAllVipsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status czKatranService::Stub::modifyVip(::grpc::ClientContext* context, const ::lb::czkatran::VipMeta& request, ::lb::czkatran::Bool* response) {
  return ::grpc::internal::BlockingUnaryCall< ::lb::czkatran::VipMeta, ::lb::czkatran::Bool, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_modifyVip_, context, request, response);
}

void czKatranService::Stub::async::modifyVip(::grpc::ClientContext* context, const ::lb::czkatran::VipMeta* request, ::lb::czkatran::Bool* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::lb::czkatran::VipMeta, ::lb::czkatran::Bool, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_modifyVip_, context, request, response, std::move(f));
}

void czKatranService::Stub::async::modifyVip(::grpc::ClientContext* context, const ::lb::czkatran::VipMeta* request, ::lb::czkatran::Bool* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_modifyVip_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::lb::czkatran::Bool>* czKatranService::Stub::PrepareAsyncmodifyVipRaw(::grpc::ClientContext* context, const ::lb::czkatran::VipMeta& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::lb::czkatran::Bool, ::lb::czkatran::VipMeta, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_modifyVip_, context, request);
}

::grpc::ClientAsyncResponseReader< ::lb::czkatran::Bool>* czKatranService::Stub::AsyncmodifyVipRaw(::grpc::ClientContext* context, const ::lb::czkatran::VipMeta& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncmodifyVipRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status czKatranService::Stub::modifyReal(::grpc::ClientContext* context, const ::lb::czkatran::RealMeta& request, ::lb::czkatran::Bool* response) {
  return ::grpc::internal::BlockingUnaryCall< ::lb::czkatran::RealMeta, ::lb::czkatran::Bool, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_modifyReal_, context, request, response);
}

void czKatranService::Stub::async::modifyReal(::grpc::ClientContext* context, const ::lb::czkatran::RealMeta* request, ::lb::czkatran::Bool* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::lb::czkatran::RealMeta, ::lb::czkatran::Bool, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_modifyReal_, context, request, response, std::move(f));
}

void czKatranService::Stub::async::modifyReal(::grpc::ClientContext* context, const ::lb::czkatran::RealMeta* request, ::lb::czkatran::Bool* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_modifyReal_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::lb::czkatran::Bool>* czKatranService::Stub::PrepareAsyncmodifyRealRaw(::grpc::ClientContext* context, const ::lb::czkatran::RealMeta& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::lb::czkatran::Bool, ::lb::czkatran::RealMeta, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_modifyReal_, context, request);
}

::grpc::ClientAsyncResponseReader< ::lb::czkatran::Bool>* czKatranService::Stub::AsyncmodifyRealRaw(::grpc::ClientContext* context, const ::lb::czkatran::RealMeta& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncmodifyRealRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status czKatranService::Stub::getVipFlags(::grpc::ClientContext* context, const ::lb::czkatran::Vip& request, ::lb::czkatran::Flags* response) {
  return ::grpc::internal::BlockingUnaryCall< ::lb::czkatran::Vip, ::lb::czkatran::Flags, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getVipFlags_, context, request, response);
}

void czKatranService::Stub::async::getVipFlags(::grpc::ClientContext* context, const ::lb::czkatran::Vip* request, ::lb::czkatran::Flags* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::lb::czkatran::Vip, ::lb::czkatran::Flags, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getVipFlags_, context, request, response, std::move(f));
}

void czKatranService::Stub::async::getVipFlags(::grpc::ClientContext* context, const ::lb::czkatran::Vip* request, ::lb::czkatran::Flags* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getVipFlags_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::lb::czkatran::Flags>* czKatranService::Stub::PrepareAsyncgetVipFlagsRaw(::grpc::ClientContext* context, const ::lb::czkatran::Vip& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::lb::czkatran::Flags, ::lb::czkatran::Vip, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getVipFlags_, context, request);
}

::grpc::ClientAsyncResponseReader< ::lb::czkatran::Flags>* czKatranService::Stub::AsyncgetVipFlagsRaw(::grpc::ClientContext* context, const ::lb::czkatran::Vip& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetVipFlagsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status czKatranService::Stub::getRealFlags(::grpc::ClientContext* context, const ::lb::czkatran::Real& request, ::lb::czkatran::Flags* response) {
  return ::grpc::internal::BlockingUnaryCall< ::lb::czkatran::Real, ::lb::czkatran::Flags, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getRealFlags_, context, request, response);
}

void czKatranService::Stub::async::getRealFlags(::grpc::ClientContext* context, const ::lb::czkatran::Real* request, ::lb::czkatran::Flags* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::lb::czkatran::Real, ::lb::czkatran::Flags, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getRealFlags_, context, request, response, std::move(f));
}

void czKatranService::Stub::async::getRealFlags(::grpc::ClientContext* context, const ::lb::czkatran::Real* request, ::lb::czkatran::Flags* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getRealFlags_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::lb::czkatran::Flags>* czKatranService::Stub::PrepareAsyncgetRealFlagsRaw(::grpc::ClientContext* context, const ::lb::czkatran::Real& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::lb::czkatran::Flags, ::lb::czkatran::Real, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getRealFlags_, context, request);
}

::grpc::ClientAsyncResponseReader< ::lb::czkatran::Flags>* czKatranService::Stub::AsyncgetRealFlagsRaw(::grpc::ClientContext* context, const ::lb::czkatran::Real& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetRealFlagsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status czKatranService::Stub::addRealForVip(::grpc::ClientContext* context, const ::lb::czkatran::realForVip& request, ::lb::czkatran::Bool* response) {
  return ::grpc::internal::BlockingUnaryCall< ::lb::czkatran::realForVip, ::lb::czkatran::Bool, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_addRealForVip_, context, request, response);
}

void czKatranService::Stub::async::addRealForVip(::grpc::ClientContext* context, const ::lb::czkatran::realForVip* request, ::lb::czkatran::Bool* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::lb::czkatran::realForVip, ::lb::czkatran::Bool, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_addRealForVip_, context, request, response, std::move(f));
}

void czKatranService::Stub::async::addRealForVip(::grpc::ClientContext* context, const ::lb::czkatran::realForVip* request, ::lb::czkatran::Bool* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_addRealForVip_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::lb::czkatran::Bool>* czKatranService::Stub::PrepareAsyncaddRealForVipRaw(::grpc::ClientContext* context, const ::lb::czkatran::realForVip& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::lb::czkatran::Bool, ::lb::czkatran::realForVip, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_addRealForVip_, context, request);
}

::grpc::ClientAsyncResponseReader< ::lb::czkatran::Bool>* czKatranService::Stub::AsyncaddRealForVipRaw(::grpc::ClientContext* context, const ::lb::czkatran::realForVip& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncaddRealForVipRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status czKatranService::Stub::delRealForVip(::grpc::ClientContext* context, const ::lb::czkatran::realForVip& request, ::lb::czkatran::Bool* response) {
  return ::grpc::internal::BlockingUnaryCall< ::lb::czkatran::realForVip, ::lb::czkatran::Bool, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_delRealForVip_, context, request, response);
}

void czKatranService::Stub::async::delRealForVip(::grpc::ClientContext* context, const ::lb::czkatran::realForVip* request, ::lb::czkatran::Bool* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::lb::czkatran::realForVip, ::lb::czkatran::Bool, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_delRealForVip_, context, request, response, std::move(f));
}

void czKatranService::Stub::async::delRealForVip(::grpc::ClientContext* context, const ::lb::czkatran::realForVip* request, ::lb::czkatran::Bool* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_delRealForVip_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::lb::czkatran::Bool>* czKatranService::Stub::PrepareAsyncdelRealForVipRaw(::grpc::ClientContext* context, const ::lb::czkatran::realForVip& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::lb::czkatran::Bool, ::lb::czkatran::realForVip, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_delRealForVip_, context, request);
}

::grpc::ClientAsyncResponseReader< ::lb::czkatran::Bool>* czKatranService::Stub::AsyncdelRealForVipRaw(::grpc::ClientContext* context, const ::lb::czkatran::realForVip& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncdelRealForVipRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status czKatranService::Stub::modifyRealsForVip(::grpc::ClientContext* context, const ::lb::czkatran::ModifiedRealForVip& request, ::lb::czkatran::Bool* response) {
  return ::grpc::internal::BlockingUnaryCall< ::lb::czkatran::ModifiedRealForVip, ::lb::czkatran::Bool, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_modifyRealsForVip_, context, request, response);
}

void czKatranService::Stub::async::modifyRealsForVip(::grpc::ClientContext* context, const ::lb::czkatran::ModifiedRealForVip* request, ::lb::czkatran::Bool* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::lb::czkatran::ModifiedRealForVip, ::lb::czkatran::Bool, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_modifyRealsForVip_, context, request, response, std::move(f));
}

void czKatranService::Stub::async::modifyRealsForVip(::grpc::ClientContext* context, const ::lb::czkatran::ModifiedRealForVip* request, ::lb::czkatran::Bool* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_modifyRealsForVip_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::lb::czkatran::Bool>* czKatranService::Stub::PrepareAsyncmodifyRealsForVipRaw(::grpc::ClientContext* context, const ::lb::czkatran::ModifiedRealForVip& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::lb::czkatran::Bool, ::lb::czkatran::ModifiedRealForVip, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_modifyRealsForVip_, context, request);
}

::grpc::ClientAsyncResponseReader< ::lb::czkatran::Bool>* czKatranService::Stub::AsyncmodifyRealsForVipRaw(::grpc::ClientContext* context, const ::lb::czkatran::ModifiedRealForVip& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncmodifyRealsForVipRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status czKatranService::Stub::getRealsForVip(::grpc::ClientContext* context, const ::lb::czkatran::Vip& request, ::lb::czkatran::Reals* response) {
  return ::grpc::internal::BlockingUnaryCall< ::lb::czkatran::Vip, ::lb::czkatran::Reals, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getRealsForVip_, context, request, response);
}

void czKatranService::Stub::async::getRealsForVip(::grpc::ClientContext* context, const ::lb::czkatran::Vip* request, ::lb::czkatran::Reals* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::lb::czkatran::Vip, ::lb::czkatran::Reals, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getRealsForVip_, context, request, response, std::move(f));
}

void czKatranService::Stub::async::getRealsForVip(::grpc::ClientContext* context, const ::lb::czkatran::Vip* request, ::lb::czkatran::Reals* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getRealsForVip_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::lb::czkatran::Reals>* czKatranService::Stub::PrepareAsyncgetRealsForVipRaw(::grpc::ClientContext* context, const ::lb::czkatran::Vip& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::lb::czkatran::Reals, ::lb::czkatran::Vip, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getRealsForVip_, context, request);
}

::grpc::ClientAsyncResponseReader< ::lb::czkatran::Reals>* czKatranService::Stub::AsyncgetRealsForVipRaw(::grpc::ClientContext* context, const ::lb::czkatran::Vip& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetRealsForVipRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status czKatranService::Stub::modifyQuicRealsMapping(::grpc::ClientContext* context, const ::lb::czkatran::ModifiedQuicReals& request, ::lb::czkatran::Bool* response) {
  return ::grpc::internal::BlockingUnaryCall< ::lb::czkatran::ModifiedQuicReals, ::lb::czkatran::Bool, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_modifyQuicRealsMapping_, context, request, response);
}

void czKatranService::Stub::async::modifyQuicRealsMapping(::grpc::ClientContext* context, const ::lb::czkatran::ModifiedQuicReals* request, ::lb::czkatran::Bool* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::lb::czkatran::ModifiedQuicReals, ::lb::czkatran::Bool, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_modifyQuicRealsMapping_, context, request, response, std::move(f));
}

void czKatranService::Stub::async::modifyQuicRealsMapping(::grpc::ClientContext* context, const ::lb::czkatran::ModifiedQuicReals* request, ::lb::czkatran::Bool* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_modifyQuicRealsMapping_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::lb::czkatran::Bool>* czKatranService::Stub::PrepareAsyncmodifyQuicRealsMappingRaw(::grpc::ClientContext* context, const ::lb::czkatran::ModifiedQuicReals& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::lb::czkatran::Bool, ::lb::czkatran::ModifiedQuicReals, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_modifyQuicRealsMapping_, context, request);
}

::grpc::ClientAsyncResponseReader< ::lb::czkatran::Bool>* czKatranService::Stub::AsyncmodifyQuicRealsMappingRaw(::grpc::ClientContext* context, const ::lb::czkatran::ModifiedQuicReals& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncmodifyQuicRealsMappingRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status czKatranService::Stub::getQuicRealsMapping(::grpc::ClientContext* context, const ::lb::czkatran::Empty& request, ::lb::czkatran::QuicReals* response) {
  return ::grpc::internal::BlockingUnaryCall< ::lb::czkatran::Empty, ::lb::czkatran::QuicReals, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getQuicRealsMapping_, context, request, response);
}

void czKatranService::Stub::async::getQuicRealsMapping(::grpc::ClientContext* context, const ::lb::czkatran::Empty* request, ::lb::czkatran::QuicReals* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::lb::czkatran::Empty, ::lb::czkatran::QuicReals, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getQuicRealsMapping_, context, request, response, std::move(f));
}

void czKatranService::Stub::async::getQuicRealsMapping(::grpc::ClientContext* context, const ::lb::czkatran::Empty* request, ::lb::czkatran::QuicReals* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getQuicRealsMapping_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::lb::czkatran::QuicReals>* czKatranService::Stub::PrepareAsyncgetQuicRealsMappingRaw(::grpc::ClientContext* context, const ::lb::czkatran::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::lb::czkatran::QuicReals, ::lb::czkatran::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getQuicRealsMapping_, context, request);
}

::grpc::ClientAsyncResponseReader< ::lb::czkatran::QuicReals>* czKatranService::Stub::AsyncgetQuicRealsMappingRaw(::grpc::ClientContext* context, const ::lb::czkatran::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetQuicRealsMappingRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status czKatranService::Stub::getStatsForVip(::grpc::ClientContext* context, const ::lb::czkatran::Vip& request, ::lb::czkatran::Stats* response) {
  return ::grpc::internal::BlockingUnaryCall< ::lb::czkatran::Vip, ::lb::czkatran::Stats, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getStatsForVip_, context, request, response);
}

void czKatranService::Stub::async::getStatsForVip(::grpc::ClientContext* context, const ::lb::czkatran::Vip* request, ::lb::czkatran::Stats* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::lb::czkatran::Vip, ::lb::czkatran::Stats, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getStatsForVip_, context, request, response, std::move(f));
}

void czKatranService::Stub::async::getStatsForVip(::grpc::ClientContext* context, const ::lb::czkatran::Vip* request, ::lb::czkatran::Stats* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getStatsForVip_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::lb::czkatran::Stats>* czKatranService::Stub::PrepareAsyncgetStatsForVipRaw(::grpc::ClientContext* context, const ::lb::czkatran::Vip& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::lb::czkatran::Stats, ::lb::czkatran::Vip, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getStatsForVip_, context, request);
}

::grpc::ClientAsyncResponseReader< ::lb::czkatran::Stats>* czKatranService::Stub::AsyncgetStatsForVipRaw(::grpc::ClientContext* context, const ::lb::czkatran::Vip& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetStatsForVipRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status czKatranService::Stub::getLruStats(::grpc::ClientContext* context, const ::lb::czkatran::Empty& request, ::lb::czkatran::Stats* response) {
  return ::grpc::internal::BlockingUnaryCall< ::lb::czkatran::Empty, ::lb::czkatran::Stats, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getLruStats_, context, request, response);
}

void czKatranService::Stub::async::getLruStats(::grpc::ClientContext* context, const ::lb::czkatran::Empty* request, ::lb::czkatran::Stats* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::lb::czkatran::Empty, ::lb::czkatran::Stats, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getLruStats_, context, request, response, std::move(f));
}

void czKatranService::Stub::async::getLruStats(::grpc::ClientContext* context, const ::lb::czkatran::Empty* request, ::lb::czkatran::Stats* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getLruStats_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::lb::czkatran::Stats>* czKatranService::Stub::PrepareAsyncgetLruStatsRaw(::grpc::ClientContext* context, const ::lb::czkatran::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::lb::czkatran::Stats, ::lb::czkatran::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getLruStats_, context, request);
}

::grpc::ClientAsyncResponseReader< ::lb::czkatran::Stats>* czKatranService::Stub::AsyncgetLruStatsRaw(::grpc::ClientContext* context, const ::lb::czkatran::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetLruStatsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status czKatranService::Stub::getLruMissStats(::grpc::ClientContext* context, const ::lb::czkatran::Empty& request, ::lb::czkatran::Stats* response) {
  return ::grpc::internal::BlockingUnaryCall< ::lb::czkatran::Empty, ::lb::czkatran::Stats, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getLruMissStats_, context, request, response);
}

void czKatranService::Stub::async::getLruMissStats(::grpc::ClientContext* context, const ::lb::czkatran::Empty* request, ::lb::czkatran::Stats* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::lb::czkatran::Empty, ::lb::czkatran::Stats, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getLruMissStats_, context, request, response, std::move(f));
}

void czKatranService::Stub::async::getLruMissStats(::grpc::ClientContext* context, const ::lb::czkatran::Empty* request, ::lb::czkatran::Stats* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getLruMissStats_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::lb::czkatran::Stats>* czKatranService::Stub::PrepareAsyncgetLruMissStatsRaw(::grpc::ClientContext* context, const ::lb::czkatran::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::lb::czkatran::Stats, ::lb::czkatran::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getLruMissStats_, context, request);
}

::grpc::ClientAsyncResponseReader< ::lb::czkatran::Stats>* czKatranService::Stub::AsyncgetLruMissStatsRaw(::grpc::ClientContext* context, const ::lb::czkatran::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetLruMissStatsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status czKatranService::Stub::getLruFailbackStats(::grpc::ClientContext* context, const ::lb::czkatran::Empty& request, ::lb::czkatran::Stats* response) {
  return ::grpc::internal::BlockingUnaryCall< ::lb::czkatran::Empty, ::lb::czkatran::Stats, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getLruFailbackStats_, context, request, response);
}

void czKatranService::Stub::async::getLruFailbackStats(::grpc::ClientContext* context, const ::lb::czkatran::Empty* request, ::lb::czkatran::Stats* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::lb::czkatran::Empty, ::lb::czkatran::Stats, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getLruFailbackStats_, context, request, response, std::move(f));
}

void czKatranService::Stub::async::getLruFailbackStats(::grpc::ClientContext* context, const ::lb::czkatran::Empty* request, ::lb::czkatran::Stats* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getLruFailbackStats_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::lb::czkatran::Stats>* czKatranService::Stub::PrepareAsyncgetLruFailbackStatsRaw(::grpc::ClientContext* context, const ::lb::czkatran::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::lb::czkatran::Stats, ::lb::czkatran::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getLruFailbackStats_, context, request);
}

::grpc::ClientAsyncResponseReader< ::lb::czkatran::Stats>* czKatranService::Stub::AsyncgetLruFailbackStatsRaw(::grpc::ClientContext* context, const ::lb::czkatran::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetLruFailbackStatsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status czKatranService::Stub::getIcmpTooBigStats(::grpc::ClientContext* context, const ::lb::czkatran::Empty& request, ::lb::czkatran::Stats* response) {
  return ::grpc::internal::BlockingUnaryCall< ::lb::czkatran::Empty, ::lb::czkatran::Stats, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getIcmpTooBigStats_, context, request, response);
}

void czKatranService::Stub::async::getIcmpTooBigStats(::grpc::ClientContext* context, const ::lb::czkatran::Empty* request, ::lb::czkatran::Stats* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::lb::czkatran::Empty, ::lb::czkatran::Stats, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getIcmpTooBigStats_, context, request, response, std::move(f));
}

void czKatranService::Stub::async::getIcmpTooBigStats(::grpc::ClientContext* context, const ::lb::czkatran::Empty* request, ::lb::czkatran::Stats* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getIcmpTooBigStats_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::lb::czkatran::Stats>* czKatranService::Stub::PrepareAsyncgetIcmpTooBigStatsRaw(::grpc::ClientContext* context, const ::lb::czkatran::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::lb::czkatran::Stats, ::lb::czkatran::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getIcmpTooBigStats_, context, request);
}

::grpc::ClientAsyncResponseReader< ::lb::czkatran::Stats>* czKatranService::Stub::AsyncgetIcmpTooBigStatsRaw(::grpc::ClientContext* context, const ::lb::czkatran::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetIcmpTooBigStatsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status czKatranService::Stub::addHealthcheckerDst(::grpc::ClientContext* context, const ::lb::czkatran::Healthcheck& request, ::lb::czkatran::Bool* response) {
  return ::grpc::internal::BlockingUnaryCall< ::lb::czkatran::Healthcheck, ::lb::czkatran::Bool, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_addHealthcheckerDst_, context, request, response);
}

void czKatranService::Stub::async::addHealthcheckerDst(::grpc::ClientContext* context, const ::lb::czkatran::Healthcheck* request, ::lb::czkatran::Bool* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::lb::czkatran::Healthcheck, ::lb::czkatran::Bool, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_addHealthcheckerDst_, context, request, response, std::move(f));
}

void czKatranService::Stub::async::addHealthcheckerDst(::grpc::ClientContext* context, const ::lb::czkatran::Healthcheck* request, ::lb::czkatran::Bool* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_addHealthcheckerDst_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::lb::czkatran::Bool>* czKatranService::Stub::PrepareAsyncaddHealthcheckerDstRaw(::grpc::ClientContext* context, const ::lb::czkatran::Healthcheck& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::lb::czkatran::Bool, ::lb::czkatran::Healthcheck, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_addHealthcheckerDst_, context, request);
}

::grpc::ClientAsyncResponseReader< ::lb::czkatran::Bool>* czKatranService::Stub::AsyncaddHealthcheckerDstRaw(::grpc::ClientContext* context, const ::lb::czkatran::Healthcheck& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncaddHealthcheckerDstRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status czKatranService::Stub::delHealthcheckerDst(::grpc::ClientContext* context, const ::lb::czkatran::Somark& request, ::lb::czkatran::Bool* response) {
  return ::grpc::internal::BlockingUnaryCall< ::lb::czkatran::Somark, ::lb::czkatran::Bool, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_delHealthcheckerDst_, context, request, response);
}

void czKatranService::Stub::async::delHealthcheckerDst(::grpc::ClientContext* context, const ::lb::czkatran::Somark* request, ::lb::czkatran::Bool* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::lb::czkatran::Somark, ::lb::czkatran::Bool, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_delHealthcheckerDst_, context, request, response, std::move(f));
}

void czKatranService::Stub::async::delHealthcheckerDst(::grpc::ClientContext* context, const ::lb::czkatran::Somark* request, ::lb::czkatran::Bool* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_delHealthcheckerDst_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::lb::czkatran::Bool>* czKatranService::Stub::PrepareAsyncdelHealthcheckerDstRaw(::grpc::ClientContext* context, const ::lb::czkatran::Somark& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::lb::czkatran::Bool, ::lb::czkatran::Somark, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_delHealthcheckerDst_, context, request);
}

::grpc::ClientAsyncResponseReader< ::lb::czkatran::Bool>* czKatranService::Stub::AsyncdelHealthcheckerDstRaw(::grpc::ClientContext* context, const ::lb::czkatran::Somark& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncdelHealthcheckerDstRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status czKatranService::Stub::getHealthcheckersDst(::grpc::ClientContext* context, const ::lb::czkatran::Empty& request, ::lb::czkatran::hcMap* response) {
  return ::grpc::internal::BlockingUnaryCall< ::lb::czkatran::Empty, ::lb::czkatran::hcMap, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getHealthcheckersDst_, context, request, response);
}

void czKatranService::Stub::async::getHealthcheckersDst(::grpc::ClientContext* context, const ::lb::czkatran::Empty* request, ::lb::czkatran::hcMap* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::lb::czkatran::Empty, ::lb::czkatran::hcMap, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getHealthcheckersDst_, context, request, response, std::move(f));
}

void czKatranService::Stub::async::getHealthcheckersDst(::grpc::ClientContext* context, const ::lb::czkatran::Empty* request, ::lb::czkatran::hcMap* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getHealthcheckersDst_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::lb::czkatran::hcMap>* czKatranService::Stub::PrepareAsyncgetHealthcheckersDstRaw(::grpc::ClientContext* context, const ::lb::czkatran::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::lb::czkatran::hcMap, ::lb::czkatran::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getHealthcheckersDst_, context, request);
}

::grpc::ClientAsyncResponseReader< ::lb::czkatran::hcMap>* czKatranService::Stub::AsyncgetHealthcheckersDstRaw(::grpc::ClientContext* context, const ::lb::czkatran::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetHealthcheckersDstRaw(context, request, cq);
  result->StartCall();
  return result;
}

czKatranService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      czKatranService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< czKatranService::Service, ::lb::czkatran::Mac, ::lb::czkatran::Bool, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](czKatranService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::lb::czkatran::Mac* req,
             ::lb::czkatran::Bool* resp) {
               return service->changeMac(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      czKatranService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< czKatranService::Service, ::lb::czkatran::Empty, ::lb::czkatran::Mac, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](czKatranService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::lb::czkatran::Empty* req,
             ::lb::czkatran::Mac* resp) {
               return service->getMac(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      czKatranService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< czKatranService::Service, ::lb::czkatran::VipMeta, ::lb::czkatran::Bool, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](czKatranService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::lb::czkatran::VipMeta* req,
             ::lb::czkatran::Bool* resp) {
               return service->addVip(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      czKatranService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< czKatranService::Service, ::lb::czkatran::Vip, ::lb::czkatran::Bool, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](czKatranService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::lb::czkatran::Vip* req,
             ::lb::czkatran::Bool* resp) {
               return service->delVip(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      czKatranService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< czKatranService::Service, ::lb::czkatran::Empty, ::lb::czkatran::Vips, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](czKatranService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::lb::czkatran::Empty* req,
             ::lb::czkatran::Vips* resp) {
               return service->getAllVips(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      czKatranService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< czKatranService::Service, ::lb::czkatran::VipMeta, ::lb::czkatran::Bool, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](czKatranService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::lb::czkatran::VipMeta* req,
             ::lb::czkatran::Bool* resp) {
               return service->modifyVip(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      czKatranService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< czKatranService::Service, ::lb::czkatran::RealMeta, ::lb::czkatran::Bool, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](czKatranService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::lb::czkatran::RealMeta* req,
             ::lb::czkatran::Bool* resp) {
               return service->modifyReal(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      czKatranService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< czKatranService::Service, ::lb::czkatran::Vip, ::lb::czkatran::Flags, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](czKatranService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::lb::czkatran::Vip* req,
             ::lb::czkatran::Flags* resp) {
               return service->getVipFlags(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      czKatranService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< czKatranService::Service, ::lb::czkatran::Real, ::lb::czkatran::Flags, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](czKatranService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::lb::czkatran::Real* req,
             ::lb::czkatran::Flags* resp) {
               return service->getRealFlags(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      czKatranService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< czKatranService::Service, ::lb::czkatran::realForVip, ::lb::czkatran::Bool, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](czKatranService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::lb::czkatran::realForVip* req,
             ::lb::czkatran::Bool* resp) {
               return service->addRealForVip(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      czKatranService_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< czKatranService::Service, ::lb::czkatran::realForVip, ::lb::czkatran::Bool, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](czKatranService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::lb::czkatran::realForVip* req,
             ::lb::czkatran::Bool* resp) {
               return service->delRealForVip(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      czKatranService_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< czKatranService::Service, ::lb::czkatran::ModifiedRealForVip, ::lb::czkatran::Bool, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](czKatranService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::lb::czkatran::ModifiedRealForVip* req,
             ::lb::czkatran::Bool* resp) {
               return service->modifyRealsForVip(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      czKatranService_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< czKatranService::Service, ::lb::czkatran::Vip, ::lb::czkatran::Reals, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](czKatranService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::lb::czkatran::Vip* req,
             ::lb::czkatran::Reals* resp) {
               return service->getRealsForVip(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      czKatranService_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< czKatranService::Service, ::lb::czkatran::ModifiedQuicReals, ::lb::czkatran::Bool, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](czKatranService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::lb::czkatran::ModifiedQuicReals* req,
             ::lb::czkatran::Bool* resp) {
               return service->modifyQuicRealsMapping(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      czKatranService_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< czKatranService::Service, ::lb::czkatran::Empty, ::lb::czkatran::QuicReals, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](czKatranService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::lb::czkatran::Empty* req,
             ::lb::czkatran::QuicReals* resp) {
               return service->getQuicRealsMapping(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      czKatranService_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< czKatranService::Service, ::lb::czkatran::Vip, ::lb::czkatran::Stats, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](czKatranService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::lb::czkatran::Vip* req,
             ::lb::czkatran::Stats* resp) {
               return service->getStatsForVip(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      czKatranService_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< czKatranService::Service, ::lb::czkatran::Empty, ::lb::czkatran::Stats, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](czKatranService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::lb::czkatran::Empty* req,
             ::lb::czkatran::Stats* resp) {
               return service->getLruStats(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      czKatranService_method_names[17],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< czKatranService::Service, ::lb::czkatran::Empty, ::lb::czkatran::Stats, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](czKatranService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::lb::czkatran::Empty* req,
             ::lb::czkatran::Stats* resp) {
               return service->getLruMissStats(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      czKatranService_method_names[18],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< czKatranService::Service, ::lb::czkatran::Empty, ::lb::czkatran::Stats, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](czKatranService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::lb::czkatran::Empty* req,
             ::lb::czkatran::Stats* resp) {
               return service->getLruFailbackStats(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      czKatranService_method_names[19],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< czKatranService::Service, ::lb::czkatran::Empty, ::lb::czkatran::Stats, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](czKatranService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::lb::czkatran::Empty* req,
             ::lb::czkatran::Stats* resp) {
               return service->getIcmpTooBigStats(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      czKatranService_method_names[20],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< czKatranService::Service, ::lb::czkatran::Healthcheck, ::lb::czkatran::Bool, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](czKatranService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::lb::czkatran::Healthcheck* req,
             ::lb::czkatran::Bool* resp) {
               return service->addHealthcheckerDst(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      czKatranService_method_names[21],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< czKatranService::Service, ::lb::czkatran::Somark, ::lb::czkatran::Bool, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](czKatranService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::lb::czkatran::Somark* req,
             ::lb::czkatran::Bool* resp) {
               return service->delHealthcheckerDst(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      czKatranService_method_names[22],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< czKatranService::Service, ::lb::czkatran::Empty, ::lb::czkatran::hcMap, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](czKatranService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::lb::czkatran::Empty* req,
             ::lb::czkatran::hcMap* resp) {
               return service->getHealthcheckersDst(ctx, req, resp);
             }, this)));
}

czKatranService::Service::~Service() {
}

::grpc::Status czKatranService::Service::changeMac(::grpc::ServerContext* context, const ::lb::czkatran::Mac* request, ::lb::czkatran::Bool* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status czKatranService::Service::getMac(::grpc::ServerContext* context, const ::lb::czkatran::Empty* request, ::lb::czkatran::Mac* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status czKatranService::Service::addVip(::grpc::ServerContext* context, const ::lb::czkatran::VipMeta* request, ::lb::czkatran::Bool* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status czKatranService::Service::delVip(::grpc::ServerContext* context, const ::lb::czkatran::Vip* request, ::lb::czkatran::Bool* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status czKatranService::Service::getAllVips(::grpc::ServerContext* context, const ::lb::czkatran::Empty* request, ::lb::czkatran::Vips* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status czKatranService::Service::modifyVip(::grpc::ServerContext* context, const ::lb::czkatran::VipMeta* request, ::lb::czkatran::Bool* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status czKatranService::Service::modifyReal(::grpc::ServerContext* context, const ::lb::czkatran::RealMeta* request, ::lb::czkatran::Bool* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status czKatranService::Service::getVipFlags(::grpc::ServerContext* context, const ::lb::czkatran::Vip* request, ::lb::czkatran::Flags* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status czKatranService::Service::getRealFlags(::grpc::ServerContext* context, const ::lb::czkatran::Real* request, ::lb::czkatran::Flags* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status czKatranService::Service::addRealForVip(::grpc::ServerContext* context, const ::lb::czkatran::realForVip* request, ::lb::czkatran::Bool* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status czKatranService::Service::delRealForVip(::grpc::ServerContext* context, const ::lb::czkatran::realForVip* request, ::lb::czkatran::Bool* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status czKatranService::Service::modifyRealsForVip(::grpc::ServerContext* context, const ::lb::czkatran::ModifiedRealForVip* request, ::lb::czkatran::Bool* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status czKatranService::Service::getRealsForVip(::grpc::ServerContext* context, const ::lb::czkatran::Vip* request, ::lb::czkatran::Reals* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status czKatranService::Service::modifyQuicRealsMapping(::grpc::ServerContext* context, const ::lb::czkatran::ModifiedQuicReals* request, ::lb::czkatran::Bool* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status czKatranService::Service::getQuicRealsMapping(::grpc::ServerContext* context, const ::lb::czkatran::Empty* request, ::lb::czkatran::QuicReals* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status czKatranService::Service::getStatsForVip(::grpc::ServerContext* context, const ::lb::czkatran::Vip* request, ::lb::czkatran::Stats* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status czKatranService::Service::getLruStats(::grpc::ServerContext* context, const ::lb::czkatran::Empty* request, ::lb::czkatran::Stats* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status czKatranService::Service::getLruMissStats(::grpc::ServerContext* context, const ::lb::czkatran::Empty* request, ::lb::czkatran::Stats* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status czKatranService::Service::getLruFailbackStats(::grpc::ServerContext* context, const ::lb::czkatran::Empty* request, ::lb::czkatran::Stats* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status czKatranService::Service::getIcmpTooBigStats(::grpc::ServerContext* context, const ::lb::czkatran::Empty* request, ::lb::czkatran::Stats* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status czKatranService::Service::addHealthcheckerDst(::grpc::ServerContext* context, const ::lb::czkatran::Healthcheck* request, ::lb::czkatran::Bool* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status czKatranService::Service::delHealthcheckerDst(::grpc::ServerContext* context, const ::lb::czkatran::Somark* request, ::lb::czkatran::Bool* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status czKatranService::Service::getHealthcheckersDst(::grpc::ServerContext* context, const ::lb::czkatran::Empty* request, ::lb::czkatran::hcMap* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace lb
}  // namespace czkatran

